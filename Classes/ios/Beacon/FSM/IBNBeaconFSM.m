/* Generator: http://goodparts.d.yumemi.jp/generator#StateMachineGenerator--78b6dd487201b7985375b3182dd80b65b8505abf
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : IBNBeaconFSM.sm
 */

#import "IBNBeaconModel.h"
#import "IBNBeaconFSM.h"
// Class declarations.
@implementation IBNBeaconMap
    static IBNBeaconMap_Outside *gIBNBeaconMap_Outside = nil;
    static IBNBeaconMap_Inside *gIBNBeaconMap_Inside = nil;
    static IBNBeaconMap_Far *gIBNBeaconMap_Far = nil;
    static IBNBeaconMap_Near *gIBNBeaconMap_Near = nil;

+ (IBNBeaconMap_Outside*)Outside;
{
    if (!gIBNBeaconMap_Outside)
    {
        gIBNBeaconMap_Outside = [[IBNBeaconMap_Outside alloc] initWithName:@"IBNBeaconMap::Outside" stateId:0];
    }
    return gIBNBeaconMap_Outside;
}

+ (IBNBeaconMap_Inside*)Inside;
{
    if (!gIBNBeaconMap_Inside)
    {
        gIBNBeaconMap_Inside = [[IBNBeaconMap_Inside alloc] initWithName:@"IBNBeaconMap::Inside" stateId:0];
    }
    return gIBNBeaconMap_Inside;
}

+ (IBNBeaconMap_Far*)Far;
{
    if (!gIBNBeaconMap_Far)
    {
        gIBNBeaconMap_Far = [[IBNBeaconMap_Far alloc] initWithName:@"IBNBeaconMap::Far" stateId:0];
    }
    return gIBNBeaconMap_Far;
}

+ (IBNBeaconMap_Near*)Near;
{
    if (!gIBNBeaconMap_Near)
    {
        gIBNBeaconMap_Near = [[IBNBeaconMap_Near alloc] initWithName:@"IBNBeaconMap::Near" stateId:0];
    }
    return gIBNBeaconMap_Near;
}

+ (void) cleanupStates
{
    [gIBNBeaconMap_Outside S_RELEASE]; gIBNBeaconMap_Outside = nil;
    [gIBNBeaconMap_Inside S_RELEASE]; gIBNBeaconMap_Inside = nil;
    [gIBNBeaconMap_Far S_RELEASE]; gIBNBeaconMap_Far = nil;
    [gIBNBeaconMap_Near S_RELEASE]; gIBNBeaconMap_Near = nil;
}
@end

@implementation IBNBeaconModelState
- (void)Entry:(IBNBeaconFSM*)context
{
}
- (void)Exit:(IBNBeaconFSM*)context
{
}
- (void)far:(IBNBeaconFSM*)context;
{
    [self Default:context];
}
- (void)in:(IBNBeaconFSM*)context;
{
    [self Default:context];
}
- (void)near:(IBNBeaconFSM*)context;
{
    [self Default:context];
}
- (void)out:(IBNBeaconFSM*)context;
{
    [self Default:context];
}

- (void)Default:(IBNBeaconFSM*)context;
{
    NSAssert( NO, @"Default transition" );
}
@end


@implementation IBNBeaconMap_Default

- (void)Default:(IBNBeaconFSM*)context;
{
}
@end
@implementation IBNBeaconMap_Outside
- (void)Entry:(IBNBeaconFSM*)context;

{
    IBNBeaconModel *ctxt = [context owner];

    [ctxt enterOutside];
}

- (void)in:(IBNBeaconFSM*)context;
{
    [[context state] Exit:context];
    [context setState:[IBNBeaconMap Inside]];
    [[context state] Entry:context];
}
@end

@implementation IBNBeaconMap_Inside
- (void)Entry:(IBNBeaconFSM*)context;

{
    IBNBeaconModel *ctxt = [context owner];

    [ctxt enterInside];
}

- (void)far:(IBNBeaconFSM*)context;
{
    [[context state] Exit:context];
    [context setState:[IBNBeaconMap Far]];
    [[context state] Entry:context];
}

- (void)near:(IBNBeaconFSM*)context;
{
    [[context state] Exit:context];
    [context setState:[IBNBeaconMap Near]];
    [[context state] Entry:context];
}

- (void)out:(IBNBeaconFSM*)context;
{
    [[context state] Exit:context];
    [context setState:[IBNBeaconMap Outside]];
    [[context state] Entry:context];
}
@end

@implementation IBNBeaconMap_Far
- (void)Entry:(IBNBeaconFSM*)context;

{
    IBNBeaconModel *ctxt = [context owner];

    [ctxt enterFar];
}

- (void)near:(IBNBeaconFSM*)context;
{
    [[context state] Exit:context];
    [context setState:[IBNBeaconMap Near]];
    [[context state] Entry:context];
}

- (void)out:(IBNBeaconFSM*)context;
{
    [[context state] Exit:context];
    [context setState:[IBNBeaconMap Outside]];
    [[context state] Entry:context];
}
@end

@implementation IBNBeaconMap_Near
- (void)Entry:(IBNBeaconFSM*)context;

{
    IBNBeaconModel *ctxt = [context owner];

    [ctxt enterNear];
}

- (void)far:(IBNBeaconFSM*)context;
{
    [[context state] Exit:context];
    [context setState:[IBNBeaconMap Far]];
    [[context state] Entry:context];
}

- (void)out:(IBNBeaconFSM*)context;
{
    [[context state] Exit:context];
    [context setState:[IBNBeaconMap Outside]];
    [[context state] Entry:context];
}
@end

@implementation IBNBeaconFSM
- (id)initWithOwner:(IBNBeaconModel*)owner;
{
    self = [super initWithState:[IBNBeaconMap Outside]];
    if (!self)
{
        return nil;
    }
    _owner = owner;
    return self;
}
- (id)initWithOwner:(IBNBeaconModel*)owner state:(SMCState*)aState;
{
    self = [super initWithState: aState];
    if (!self)
{
        return nil;
    }
    _owner = owner;
    return self;
}
- (void)dealloc
{
    [IBNBeaconMap cleanupStates];
    [super S_DEALLOC];
}
- (IBNBeaconModelState*)state;
{
    return (IBNBeaconModelState*)_state;
}
- (IBNBeaconModel*)owner;
{
    return _owner;
}
- (void)enterStartState;
{
    [[self state] Entry:self];
}

- (void)far;
{
    [[self state] far:self];
}

- (void)in;
{
    [[self state] in:self];
}

- (void)near;
{
    [[self state] near:self];
}

- (void)out;
{
    [[self state] out:self];
}
@end

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
